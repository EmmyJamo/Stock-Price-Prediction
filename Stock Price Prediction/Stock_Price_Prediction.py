# Import necessary libraries
# yfinance: For fetching historical stock data
# pandas: For data manipulation and analysis
# numpy: For numerical operations
# sklearn: For machine learning tasks (train-test split, model building, evaluation, and hyperparameter tuning)
# matplotlib: For data visualization
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt


# Step 1: Data Collection
# Download historical stock data for Apple Inc. (AAPL) from Yahoo Finance using the yfinance library.
# Data from January 1, 2010, to January 1, 2023.
symbol = 'AAPL'
data = yf.download(symbol, start='2010-01-01', end='2023-01-01')

# Step 2: Feature Engineering
# Calculate daily returns as a feature. This is the percentage change in the adjusted close price from one day to the next.
data['Returns'] = data['Adj Close'].pct_change()

# Calculate simple moving averages (SMA) over 20 and 50 days as additional features.
# SMAs help smooth out price data to identify the trend direction.
data['SMA_20'] = data['Adj Close'].rolling(window=20).mean()
data['SMA_50'] = data['Adj Close'].rolling(window=50).mean()

# Drop rows that contain missing values generated by the rolling calculations.
# This ensures that the dataset is clean and free from NaN values that could interfere with model training.
data.dropna(inplace=True)

# Step 3: Data Normalization
# Standardize the features to ensure they have a mean of 0 and a standard deviation of 1.
# Standardization is important for machine learning models as it allows them to perform better by treating all features equally.
features = ['Returns', 'SMA_20', 'SMA_50']
data[features] = (data[features] - data[features].mean()) / data[features].std()

# Display the first few rows of the prepared dataset to inspect the data and ensure everything looks correct.
print(data.head())

# Step 4: Prepare Data for Modeling
# Define the features (X) and the target variable (y).
# The features are the standardized returns and moving averages.
# The target variable is the adjusted close price shifted by one day to predict the next day's price.
X = data[features]
y = data['Adj Close'].shift(-1)  # Shift target by -1 to align it with the next day's prediction.

# Drop the last row that now contains a NaN value in the target column due to the shift operation.
X = X[:-1]
y = y[:-1]

# Split the data into training and test sets.
# The training set will be used to train the model, and the test set will be used to evaluate its performance.
# We use an 80-20 split, with 80% of the data for training and 20% for testing.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train the Random Forest Model
# Initialize the Random Forest Regressor, a machine learning model that combines multiple decision trees to improve predictive accuracy.
# We start with 100 trees (n_estimators) and a fixed random state for reproducibility.
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model on the training data. This involves fitting the model to learn the relationship between the features and the target variable.
model.fit(X_train, y_train)

# Make predictions on both the training and test data to evaluate the model's performance.
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Evaluate the model's performance using two key metrics:
# RMSE (Root Mean Squared Error): Measures the average magnitude of the error between predicted and actual values.
# R-squared (R²): Indicates the proportion of variance in the target variable that is explained by the model.
train_rmse = mean_squared_error(y_train, y_pred_train, squared=False)
test_rmse = mean_squared_error(y_test, y_pred_test, squared=False)
train_r2 = r2_score(y_train, y_pred_train)
test_r2 = r2_score(y_test, y_pred_test)

# Print the evaluation metrics to understand how well the model performs on the training data versus the test data.
print(f"Train RMSE: {train_rmse:.2f}, R2: {train_r2:.2f}")
print(f"Test RMSE: {test_rmse:.2f}, R2: {test_r2:.2f}")

# Step 6: Hyperparameter Tuning using Grid Search
# Define a grid of hyperparameters to search over.
# Hyperparameter tuning is crucial for optimizing the model's performance by finding the best combination of parameters.
param_grid = {
    'n_estimators': [50, 100, 200],  # Number of trees in the forest
    'max_depth': [None, 10, 20],     # Maximum depth of the trees
    'min_samples_split': [2, 5, 10]  # Minimum number of samples required to split a node
}

# Initialize GridSearchCV, a tool that automatically finds the best hyperparameters through cross-validation.
# Cross-validation helps to ensure that the model's performance is robust and not just a result of overfitting.
grid_search = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=3, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

# Retrieve and print the best hyperparameters found by grid search.
best_params = grid_search.best_params_
print("Best Parameters:", best_params)

# Train the Random Forest model using the best hyperparameters found.
# This should improve the model's performance compared to the default settings.
best_model = grid_search.best_estimator_
y_pred_best = best_model.predict(X_test)

# Evaluate the tuned model's performance using the same metrics as before.
best_rmse = mean_squared_error(y_test, y_pred_best, squared=False)
best_r2 = r2_score(y_test, y_pred_best)

print(f"Best Test RMSE: {best_rmse:.2f}, R2: {best_r2:.2f}")

# Step 7: Predict Future Outcomes
# Fetch recent data from January 2023 to January 2024 to make future predictions.
future_data = yf.download(symbol, start='2023-01-01', end='2024-01-01')

# Calculate the same features (daily returns and moving averages) for this new data.
future_data['Returns'] = future_data['Adj Close'].pct_change()
future_data['SMA_20'] = future_data['Adj Close'].rolling(window=20).mean()
future_data['SMA_50'] = future_data['Adj Close'].rolling(window=50).mean()
future_data.dropna(inplace=True)

# Standardize the features for prediction using the same mean and standard deviation as the training data.
# This ensures consistency in how the model interprets the new data.
future_features = future_data[features]
future_features = (future_features - X.mean()) / X.std()

# Make predictions on the future data using the tuned model.
future_predictions = best_model.predict(future_features)

# Step 8: Visualize Predictions
# Plot the actual vs. predicted future stock prices to visualize how well the model is predicting.
plt.figure(figsize=(10, 6))
plt.plot(future_data.index, future_data['Adj Close'], label='Actual Price')
plt.plot(future_data.index, future_predictions, label='Predicted Price', linestyle='--')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('Future Price Predictions for AAPL')
plt.legend()
plt.show()
